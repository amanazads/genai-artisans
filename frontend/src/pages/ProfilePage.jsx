import React, { useState, useEffect } from "react";
import {
  User,
  MapPin,
  Palette,
  Sparkles,
  Save,
  RotateCcw,
  Upload,
  Camera,
} from "lucide-react";
import DashboardLayout from "../components/layout/DashboardLayout";
import { useLanguage } from "../context/LanguageContext";
import { useUser } from "../context/UserContext";
import { apiService } from "../services/api";

const ProfilePage = () => {
  const { language, changeLanguage } = useLanguage();
  const { user, updateUserProfile } = useUser();
  const [isGeneratingStory, setIsGeneratingStory] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [loading, setLoading] = useState(false);
  const [hasChanges, setHasChanges] = useState(false);
  const [profileImage, setProfileImage] = useState(null);
  const [profileData, setProfileData] = useState({
    name: "",
    state: "",
    city: "",
    artisan_id: "",
    experience: 0,
    product_info: [],
    craft_description: "",
    story: "",
    profile_image: "",
  });

  // Load user data from context
  useEffect(() => {
    if (user) {
      setProfileData({
        name: user.name || "",
        state: user.state || "",
        city: user.city || "",
        artisan_id: user.artisan_id || "",
        experience: user.experience || 0,
        product_info: user.product_info || [],
        craft_description: user.craft_description || "",
        story: user.story || generateDefaultStory(user),
        profile_image: user.profile_image || "",
      });
      setHasChanges(false);
    }
  }, [user]);

  const generateDefaultStory = (artisanData) => {
    const name = artisanData?.name || "Artisan";
    const location = `${artisanData?.city || "Village"}, ${
      artisanData?.state || "India"
    }`;
    const experience = artisanData?.experience || 10;

    return `Meet ${name}, a master craftsman from the vibrant region of ${location}. For over ${experience} years, ${name} has been weaving magic into traditional crafts, carrying forward the legacy of generations.

${name}'s journey began in childhood, watching nimble fingers create intricate patterns that seemed to dance with life. Each creation tells a story of tradition, celebration, and rich cultural heritage.

The artisan's workshop, filled with vibrant colors and the gentle rhythm of craftsmanship, has become a sanctuary where ancient techniques meet contemporary designs. ${name} believes that every piece carries the soul of tradition – its festivals, its love for life, and its deep respect for craftsmanship.

Through KalaKriti AI, ${name} now shares this art with the world, ensuring that beautiful traditions continue to flourish for generations to come.

When you purchase from ${name}, you're not just buying a product – you're becoming part of a story that spans generations, a tradition that celebrates the beauty of handmade artistry.`;
  };

  const handleImageUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setProfileImage(e.target.result);
        handleInputChange("profile_image", e.target.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const translations = {
    en: {
      pageTitle: "My Profile",
      yourDetails: "Your Details",
      name: "Name",
      villageCity: "Village/City",
      tellUsAboutCraft: "Tell us about your craft in a few lines",
      craftPlaceholder:
        "Describe your craft, your experience, and what makes your work special...",
      yourStory: "Your KalaKriti Story",
      generatedBy: "Generated by KalaKriti AI",
      regenerateStory: "Regenerate Story",
      saveChanges: "Save Changes",
      generating: "Generating your new story...",
      profileUpdated: "Profile updated successfully!",
      storyRegenerated: "Story regenerated successfully!",
    },
    pa: {
      pageTitle: "ਮੇਰਾ ਪ੍ਰੋਫਾਈਲ",
      yourDetails: "ਤੁਹਾਡੇ ਵੇਰਵੇ",
      name: "ਨਾਮ",
      villageCity: "ਪਿੰਡ/ਸ਼ਹਿਰ",
      tellUsAboutCraft: "ਸਾਨੂੰ ਆਪਣੀ ਕਲਾ ਬਾਰੇ ਕੁਝ ਲਾਈਨਾਂ ਵਿੱਚ ਦੱਸੋ",
      craftPlaceholder:
        "ਆਪਣੀ ਕਲਾ, ਆਪਣਾ ਤਜ਼ਰਬਾ, ਅਤੇ ਤੁਹਾਡੇ ਕੰਮ ਨੂੰ ਖਾਸ ਬਣਾਉਣ ਵਾਲੀ ਚੀਜ਼ ਦਾ ਵਰਣਨ ਕਰੋ...",
      yourStory: "ਤੁਹਾਡੀ ਕਲਾਕ੍ਰਿਤੀ ਕਹਾਣੀ",
      generatedBy: "ਕਲਾਕ੍ਰਿਤੀ AI ਦੁਆਰਾ ਤਿਆਰ",
      regenerateStory: "ਕਹਾਣੀ ਦੁਬਾਰਾ ਬਣਾਓ",
      saveChanges: "ਤਬਦੀਲੀਆਂ ਸੇਵ ਕਰੋ",
      generating: "ਤੁਹਾਡੀ ਨਵੀਂ ਕਹਾਣੀ ਬਣਾਈ ਜਾ ਰਹੀ ਹੈ...",
      profileUpdated: "ਪ੍ਰੋਫਾਈਲ ਸਫਲਤਾਪੂਰਵਕ ਅਪਡੇਟ ਹੋਇਆ!",
      storyRegenerated: "ਕਹਾਣੀ ਸਫਲਤਾਪੂਰਵਕ ਦੁਬਾਰਾ ਬਣਾਈ ਗਈ!",
    },
  };

  const t = translations[language];

  const handleInputChange = (field, value) => {
    setProfileData((prev) => ({
      ...prev,
      [field]: value,
    }));
    setHasChanges(true);
  };

  const handleRegenerateStory = async () => {
    setIsGeneratingStory(true);

    // Simulate AI story generation
    setTimeout(() => {
      const newStory = `Meet ${profileData.name}, an extraordinary artisan from ${profileData.village}. ${profileData.craftDescription}

This master craftsperson has dedicated their life to preserving and evolving traditional art forms, creating pieces that bridge the gap between heritage and contemporary appeal. Each creation is a testament to years of dedication, skill, and an unwavering passion for authentic craftsmanship.

${profileData.name}'s workshop is a place where time-honored techniques come alive through modern interpretations. The careful attention to detail, the selection of premium materials, and the patience required for each piece reflects a deep commitment to excellence that has been passed down through generations.

Through KalaKriti AI, ${profileData.name} now shares this incredible artistry with a global audience, ensuring that traditional crafts continue to thrive in the digital age. Every piece tells a story – not just of the craft itself, but of the hands that created it and the heritage it represents.

When you choose a creation by ${profileData.name}, you become part of this living tradition, supporting not just an artist, but an entire cultural legacy that deserves to be celebrated and preserved.`;

      setProfileData((prev) => ({
        ...prev,
        story: newStory,
      }));
      setIsGeneratingStory(false);

      // Show success message
      alert(t.storyRegenerated);
    }, 3000);
  };

  const handleSaveProfile = async () => {
    try {
      setIsSaving(true);

      let imageUrl = profileData.profile_image;

      // Upload profile image if a new one was selected
      if (profileImage) {
        try {
          const formData = new FormData();
          formData.append("image", profileImage);

          const response = await fetch("http://localhost:8000/api/upload", {
            method: "POST",
            body: formData,
          });

          if (!response.ok) {
            throw new Error("Failed to upload image");
          }

          const result = await response.json();
          imageUrl = result.url;
        } catch (error) {
          console.error("Error uploading image:", error);
          alert("Failed to upload profile image. Please try again.");
          return;
        }
      }

      // Prepare artisan data for backend matching the Info model exactly
      const artisanData = {
        name: profileData.name,
        state: profileData.state,
        city: profileData.city,
        artisan_id: profileData.artisan_id,
        experience: profileData.experience || 0,
        product_info: profileData.product_info || [],
        craft_description: profileData.craftDescription || "",
        story: profileData.story || "",
        profile_image: imageUrl || "",
      };

      // Use UserContext to update profile
      const result = await updateUserProfile(artisanData);

      if (result.success) {
        alert(t.profileUpdated);
        setHasChanges(false);
        setProfileImage(null); // Clear the pending image
        console.log("Profile saved successfully:", result);
      }
    } catch (error) {
      console.error("Error saving profile:", error);
      const errorMessage =
        error.response?.data?.error ||
        error.message ||
        "Failed to save profile. Please try again.";
      alert(errorMessage);
    } finally {
      setIsSaving(false);
    }
  };

  const handleProfileImageChange = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    // Validate file type
    if (!file.type.startsWith("image/")) {
      alert("Please select a valid image file.");
      return;
    }

    // Validate file size (5MB limit)
    if (file.size > 5 * 1024 * 1024) {
      alert("File size must be less than 5MB.");
      return;
    }

    try {
      setProfileImage(file);

      // Create preview
      const reader = new FileReader();
      reader.onload = (e) => {
        setProfileData((prev) => ({
          ...prev,
          profile_image: e.target.result, // Temporary preview
        }));
        setHasChanges(true);
      };
      reader.readAsDataURL(file);
    } catch (error) {
      console.error("Error handling profile image:", error);
      alert("Failed to process image. Please try again.");
    }
  };

  return (
    <DashboardLayout
      title={t.pageTitle}
      language={language}
      onLanguageChange={changeLanguage}
    >
      {loading ? (
        <div className="text-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
          <p className="text-gray-600">
            {language === "en"
              ? "Loading profile..."
              : "ਪ੍ਰੋਫਾਈਲ ਲੋਡ ਹੋ ਰਹਾ ਹੈ..."}
          </p>
        </div>
      ) : (
        <div className="max-w-4xl mx-auto space-y-8">
          {/* Profile Details Section */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6 lg:p-8">
            <div className="flex items-center space-x-3 mb-6">
              <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                <User size={24} className="text-purple-600" />
              </div>
              <h2 className="text-xl font-semibold text-gray-900">
                {t.yourDetails}
              </h2>
            </div>

            <div className="space-y-6">
              {/* Profile Image Section */}
              <div className="border-b border-gray-200 pb-6">
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  Profile Image
                </label>
                <div className="flex items-center space-x-6">
                  <div className="w-24 h-24 rounded-full overflow-hidden bg-gray-100 border-2 border-gray-200">
                    {profileData.profile_image ? (
                      <img
                        src={`http://localhost:8000${profileData.profile_image}`}
                        alt="Profile"
                        className="w-full h-full object-cover"
                      />
                    ) : (
                      <div className="w-full h-full flex items-center justify-center">
                        <User size={32} className="text-gray-400" />
                      </div>
                    )}
                  </div>
                  <div className="flex-1">
                    <input
                      type="file"
                      accept="image/*"
                      onChange={handleProfileImageChange}
                      className="hidden"
                      id="profile-image-upload"
                    />
                    <label
                      htmlFor="profile-image-upload"
                      className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 cursor-pointer transition-colors"
                    >
                      <Upload size={16} className="mr-2" />
                      Change Photo
                    </label>
                    <p className="text-sm text-gray-500 mt-2">
                      Upload a profile picture. Recommended size: 400x400px
                    </p>
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    {t.name}
                  </label>
                  <input
                    type="text"
                    value={profileData.name}
                    onChange={(e) => handleInputChange("name", e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 outline-none transition-colors"
                  />
                </div>

                <div>
                  <label className="flex items-center space-x-2 text-sm font-medium text-gray-700 mb-2">
                    <MapPin size={16} />
                    <span>{language === "en" ? "City" : "ਸ਼ਹਿਰ"}</span>
                  </label>
                  <input
                    type="text"
                    value={profileData.city}
                    onChange={(e) => handleInputChange("city", e.target.value)}
                    placeholder="e.g., Hoshiarpur"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 outline-none transition-colors"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    {language === "en" ? "State" : "ਰਾਜ"}
                  </label>
                  <input
                    type="text"
                    value={profileData.state}
                    onChange={(e) => handleInputChange("state", e.target.value)}
                    placeholder="e.g., Punjab"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 outline-none transition-colors"
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    {language === "en" ? "Years of Experience" : "ਤਜਰਬੇ ਦੇ ਸਾਲ"}
                  </label>
                  <input
                    type="number"
                    value={profileData.experience}
                    onChange={(e) =>
                      handleInputChange(
                        "experience",
                        parseInt(e.target.value) || 0
                      )
                    }
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 outline-none transition-colors"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    {language === "en" ? "Artisan ID" : "ਕਲਾਕਾਰ ID"}
                  </label>
                  <input
                    type="text"
                    value={profileData.artisan_id}
                    disabled
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-500 cursor-not-allowed"
                  />
                </div>
              </div>

              <div>
                <label className="flex items-center space-x-2 text-sm font-medium text-gray-700 mb-2">
                  <Palette size={16} />
                  <span>{t.tellUsAboutCraft}</span>
                </label>
                <textarea
                  value={profileData.craft_description}
                  onChange={(e) =>
                    handleInputChange("craft_description", e.target.value)
                  }
                  placeholder={t.craftPlaceholder}
                  rows={4}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 outline-none transition-colors resize-none"
                />
              </div>
            </div>
          </div>

          {/* AI Story Section */}
          <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-xl border border-purple-100 p-6 lg:p-8">
            <div className="flex items-start justify-between mb-6">
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                  <Sparkles size={24} className="text-purple-600" />
                </div>
                <div>
                  <h2 className="text-xl font-semibold text-gray-900">
                    {t.yourStory}
                  </h2>
                  <p className="text-sm text-purple-600 font-medium">
                    {t.generatedBy}
                  </p>
                </div>
              </div>

              <button
                onClick={handleRegenerateStory}
                disabled={isGeneratingStory}
                className="bg-purple-600 hover:bg-purple-700 text-white font-medium py-2 px-4 rounded-lg transition-colors flex items-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isGeneratingStory ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                    <span>{t.generating}</span>
                  </>
                ) : (
                  <>
                    <RotateCcw size={16} />
                    <span>{t.regenerateStory}</span>
                  </>
                )}
              </button>
            </div>

            <div className="bg-white rounded-lg p-6 shadow-sm">
              <div className="prose max-w-none">
                {profileData.story.split("\n\n").map((paragraph, index) => (
                  <p
                    key={index}
                    className="text-gray-700 leading-relaxed mb-4 last:mb-0"
                  >
                    {paragraph}
                  </p>
                ))}
              </div>
            </div>
          </div>

          {/* Save Button */}
          <div className="flex justify-end">
            <button
              onClick={handleSaveProfile}
              disabled={isSaving}
              className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white font-semibold py-3 px-8 rounded-lg transition-all duration-200 flex items-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSaving ? (
                <>
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
                  <span>
                    {language === "en" ? "Saving..." : "ਸੇਵ ਹੋ ਰਿਹਾ ਹੈ..."}
                  </span>
                </>
              ) : (
                <>
                  <Save size={20} />
                  <span>{t.saveChanges}</span>
                </>
              )}
            </button>
          </div>
        </div>
      )}
    </DashboardLayout>
  );
};

export default ProfilePage;
